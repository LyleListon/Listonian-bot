[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage settings
addopts = 
    --cov=arbitrage_bot
    --cov-report=html
    --cov-report=xml
    --cov-report=json
    --cov-config=.coveragerc
    -v
    -ra
    --strict-markers
    --tb=short

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Tests that take longer to run
    api: API tests
    web3: Web3 related tests
    dex: DEX related tests
    async: Asynchronous tests

# Environment variables
env =
    PYTHONPATH=.
    PYTHONWARNINGS=ignore::DeprecationWarning
    COVERAGE_FILE=.coverage

# Logging settings
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test session settings
timeout = 300
xfail_strict = True
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning

# Coverage settings
[coverage:run]
branch = True
parallel = True
concurrency = multiprocessing
data_file = .coverage

[coverage:report]
precision = 2
skip_covered = False
sort = Cover
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise AssertionError
    raise NotImplementedError
    if TYPE_CHECKING:
    @abstract
    TODO
    FIXME

[coverage:html]
directory = coverage_html
title = Arbitrage Bot Coverage Report
extra_css = coverage_html_extra.css
show_contexts = True

[coverage:xml]
output = coverage.xml

[coverage:json]
output = coverage.json
pretty_print = True
show_contexts = True
