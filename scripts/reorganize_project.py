#!/usr/bin/env python3
"""
Project Reorganization Script

This script helps reorganize the project according to the ideal structure.
"""

import os
import sys
import shutil
import json
from pathlib import Path
from typing import Dict, List, Set, Any

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Define the ideal structure
IDEAL_STRUCTURE = {
    "arbitrage_bot/core/dex": [
        "pancakeswap.py",
        "rocketswap.py",
        "swapbased.py",
        "uniswap_v3.py"
    ],
    "mcp_servers": [
        "run_base_dex_scanner_example.py",
        "run_base_dex_scanner_mcp.py",
        "run_base_dex_scanner_mcp_with_api.py",
        "run_base_dex_scanner_mcp_wrapper.py"
    ]
}

# Files that should not be moved
DO_NOT_MOVE = [
    "run_bot.py",
    "run_dashboard.py",
    "config.json",
    ".env",
    ".env.production",
    "README.md"
]

class ProjectReorganizer:
    """Reorganize the project according to the ideal structure."""
    
    def __init__(self, root_dir: Path):
        """Initialize the reorganizer."""
        self.root_dir = root_dir
        self.backup_dir = root_dir / "backup"
        self.moved_files: Dict[str, str] = {}
        
    def create_backup(self) -> None:
        """Create a backup of the project."""
        print("Creating backup...")
        
        # Create backup directory
        backup_dir = self.backup_dir
        backup_dir.mkdir(exist_ok=True)
        
        # Copy files to backup
        for src_path in IDEAL_STRUCTURE:
            for file_name in IDEAL_STRUCTURE[src_path]:
                src_file = self.root_dir / file_name
                if src_file.exists():
                    dst_file = backup_dir / file_name
                    shutil.copy2(src_file, dst_file)
                    print(f"Backed up {file_name} to {dst_file.relative_to(self.root_dir)}")
        
        print(f"Backup created in {backup_dir.relative_to(self.root_dir)}")
    
    def create_directories(self) -> None:
        """Create the necessary directories."""
        print("Creating directories...")
        
        for dir_path in IDEAL_STRUCTURE:
            full_path = self.root_dir / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
            print(f"Created directory {full_path.relative_to(self.root_dir)}")
    
    def move_files(self) -> None:
        """Move files to their ideal locations."""
        print("Moving files...")
        
        for dst_path in IDEAL_STRUCTURE:
            for file_name in IDEAL_STRUCTURE[dst_path]:
                src_file = self.root_dir / file_name
                if src_file.exists() and file_name not in DO_NOT_MOVE:
                    dst_file = self.root_dir / dst_path / file_name
                    
                    # Create __init__.py files in all parent directories
                    current_dir = dst_file.parent
                    while current_dir != self.root_dir:
                        init_file = current_dir / "__init__.py"
                        if not init_file.exists():
                            with open(init_file, 'w') as f:
                                f.write("# Auto-generated by reorganize_project.py\n")
                            print(f"Created {init_file.relative_to(self.root_dir)}")
                        current_dir = current_dir.parent
                    
                    # Move the file
                    try:
                        shutil.move(src_file, dst_file)
                        self.moved_files[str(src_file.relative_to(self.root_dir))] = str(dst_file.relative_to(self.root_dir))
                        print(f"Moved {file_name} to {dst_file.relative_to(self.root_dir)}")
                    except Exception as e:
                        print(f"Error moving {file_name}: {e}")
    
    def update_imports(self) -> None:
        """Update imports in Python files."""
        print("Updating imports...")
        
        # Find all Python files
        python_files = list(self.root_dir.glob("**/*.py"))
        
        for file_path in python_files:
            if file_path.is_file():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Update imports for moved files
                    for old_path, new_path in self.moved_files.items():
                        old_module = old_path.replace('/', '.').replace('\\', '.').replace('.py', '')
                        new_module = new_path.replace('/', '.').replace('\\', '.').replace('.py', '')
                        
                        # Replace import statements
                        content = content.replace(f"import {old_module}", f"import {new_module}")
                        content = content.replace(f"from {old_module}", f"from {new_module}")
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                
                except Exception as e:
                    print(f"Error updating imports in {file_path.relative_to(self.root_dir)}: {e}")
    
    def generate_report(self) -> Dict[str, Any]:
        """Generate a report of the reorganization."""
        print("Generating report...")
        
        report = {
            "backup_directory": str(self.backup_dir.relative_to(self.root_dir)),
            "moved_files": self.moved_files,
            "created_directories": [str(self.root_dir / dir_path) for dir_path in IDEAL_STRUCTURE]
        }
        
        return report
    
    def save_report(self, report: Dict[str, Any], output_path: Path) -> None:
        """Save the report to a file."""
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2)
        
        print(f"Report saved to {output_path}")
    
    def run(self) -> Dict[str, Any]:
        """Run the reorganization."""
        self.create_backup()
        self.create_directories()
        self.move_files()
        self.update_imports()
        
        report = self.generate_report()
        report_path = self.root_dir / "reorganization_report.json"
        self.save_report(report, report_path)
        
        return report

def main():
    """Main entry point."""
    print("Project Reorganization Script")
    print("This script will reorganize your project according to the ideal structure.")
    print("A backup of all files will be created before any changes are made.")
    print()
    
    response = input("Do you want to proceed? (y/n): ")
    if response.lower() != 'y':
        print("Reorganization cancelled.")
        return
    
    reorganizer = ProjectReorganizer(project_root)
    report = reorganizer.run()
    
    print("\nReorganization complete.")
    print(f"Moved {len(report['moved_files'])} files to their ideal locations.")
    print(f"A backup of all files was created in {report['backup_directory']}.")
    print(f"A report of the reorganization was saved to reorganization_report.json.")
    
    print("\nNext steps:")
    print("1. Review the reorganization_report.json file for details on moved files")
    print("2. Test the project to ensure everything still works")
    print("3. Update documentation to reflect the new structure")
    print("4. Commit the changes to version control")

if __name__ == "__main__":
    main()
